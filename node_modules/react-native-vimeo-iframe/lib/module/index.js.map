{"version":3,"sources":["index.tsx"],"names":["React","useCallback","useRef","WebView","template","PlayerEvents","Vimeo","handlers","handlersArr","style","videoId","params","webRef","url","registerHandlers","forEach","name","onBridgeMessage","event","payload","JSON","parse","nativeEvent","data","bridgeMessageHandler","uri","a","console","log"],"mappings":"AAAA,OAAOA,KAAP,IAAgBC,WAAhB,EAA6BC,MAA7B,QAA2C,OAA3C;AACA,SAASC,OAAT,QAAwB,sBAAxB;AAEA,OAAOC,QAAP,MAAqB,YAArB;AACA,SAAsBC,YAAtB,QAA0C,SAA1C;AAEA,OAAO,MAAMC,KAA4B,GAAG,CAAC;AAC3CC,EAAAA,QAAQ,EAAEC,WADiC;AAE3CC,EAAAA,KAF2C;AAG3CC,EAAAA,OAH2C;AAI3CC,EAAAA;AAJ2C,CAAD,KAKtC;AACJ,QAAMC,MAAM,GAAGV,MAAM,EAArB;AACA,QAAMW,GAAW,GAAGF,MAAM,GACrB,kCAAiCD,OAAQ,IAAGC,MAAO,EAD9B,GAErB,kCAAiCD,OAAQ,EAF9C;AAIA,QAAMH,QAAa,GAAG,EAAtB;AAEA,QAAMO,gBAAgB,GAAGb,WAAW,CAAC,MAAM;AACzCI,IAAAA,YAAY,CAACU,OAAb,CAAsBC,IAAD,IAAU;AAC7B,UAAIR,WAAJ,EAAiBD,QAAQ,CAACS,IAAD,CAAR,GAAiBR,WAAW,CAACQ,IAAD,CAA5B;AAClB,KAFD;AAGD,GAJmC,EAIjC,CAACT,QAAD,EAAWC,WAAX,CAJiC,CAApC;AAMAM,EAAAA,gBAAgB;AAEhB,QAAMG,eAAe,GAAGhB,WAAW,CAChCiB,KAAD,IAAgB;AACd,UAAMC,OAAoC,GAAGC,IAAI,CAACC,KAAL,CAC3CH,KAAK,CAACI,WAAN,CAAkBC,IADyB,CAA7C;AAIA,QAAIC,oBAAoB,GAAGjB,QAAQ,CAACY,OAAD,aAACA,OAAD,uBAACA,OAAO,CAAEH,IAAV,CAAnC;AACA,QAAIQ,oBAAJ,EAA0BA,oBAAoB,CAACL,OAAD,aAACA,OAAD,uBAACA,OAAO,CAAEI,IAAV,CAApB;AAC3B,GARgC,EASjC,CAAChB,QAAD,CATiC,CAAnC;AAYA,sBACE,oBAAC,OAAD;AACE,IAAA,KAAK,EAAEE,KADT;AAEE,IAAA,qBAAqB,EAAE,IAFzB;AAGE,IAAA,MAAM,EAAE;AAAEgB,MAAAA,GAAG,EAAEZ;AAAP,KAHV;AAIE,IAAA,iBAAiB,EAAE,IAJrB;AAKE,IAAA,GAAG,EAAED,MALP;AAME,IAAA,SAAS,EAAEK,eANb;AAOE,IAAA,aAAa,EAAE,KAPjB;AAQE,IAAA,uBAAuB,EAAGS,CAAD,IAAOC,OAAO,CAACC,GAAR,CAAYF,CAAZ,aAAYA,CAAZ,uBAAYA,CAAC,CAAEb,GAAf,CARlC;AASE,IAAA,kBAAkB,EAAET,QAAQ,CAACS,GAAD;AAT9B,IADF;AAaD,CA9CM","sourcesContent":["import React, { useCallback, useRef } from 'react'\nimport { WebView } from 'react-native-webview'\n\nimport template from './template'\nimport { LayoutProps, PlayerEvents } from './types'\n\nexport const Vimeo: React.FC<LayoutProps> = ({\n  handlers: handlersArr,\n  style,\n  videoId,\n  params,\n}) => {\n  const webRef = useRef<WebView>()\n  const url: string = params\n    ? `https://player.vimeo.com/video/${videoId}?${params}`\n    : `https://player.vimeo.com/video/${videoId}`\n\n  const handlers: any = {}\n\n  const registerHandlers = useCallback(() => {\n    PlayerEvents.forEach((name) => {\n      if (handlersArr) handlers[name] = handlersArr[name]\n    })\n  }, [handlers, handlersArr])\n\n  registerHandlers()\n\n  const onBridgeMessage = useCallback(\n    (event: any) => {\n      const payload: { name: string; data: any } = JSON.parse(\n        event.nativeEvent.data\n      )\n\n      let bridgeMessageHandler = handlers[payload?.name]\n      if (bridgeMessageHandler) bridgeMessageHandler(payload?.data)\n    },\n    [handlers]\n  )\n\n  return (\n    <WebView\n      style={style}\n      allowsFullscreenVideo={true}\n      source={{ uri: url }}\n      javaScriptEnabled={true}\n      ref={webRef as any}\n      onMessage={onBridgeMessage}\n      scrollEnabled={false}\n      onNavigationStateChange={(a) => console.log(a?.url)}\n      injectedJavaScript={template(url)}\n    />\n  )\n}\n"]}