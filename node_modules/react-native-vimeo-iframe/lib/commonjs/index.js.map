{"version":3,"sources":["index.tsx"],"names":["Vimeo","handlers","handlersArr","style","videoId","params","webRef","url","registerHandlers","PlayerEvents","forEach","name","onBridgeMessage","event","payload","JSON","parse","nativeEvent","data","bridgeMessageHandler","uri","a","console","log"],"mappings":";;;;;;;AAAA;;AACA;;AAEA;;AACA;;;;;;;;AAEO,MAAMA,KAA4B,GAAG,CAAC;AAC3CC,EAAAA,QAAQ,EAAEC,WADiC;AAE3CC,EAAAA,KAF2C;AAG3CC,EAAAA,OAH2C;AAI3CC,EAAAA;AAJ2C,CAAD,KAKtC;AACJ,QAAMC,MAAM,GAAG,oBAAf;AACA,QAAMC,GAAW,GAAGF,MAAM,GACrB,kCAAiCD,OAAQ,IAAGC,MAAO,EAD9B,GAErB,kCAAiCD,OAAQ,EAF9C;AAIA,QAAMH,QAAa,GAAG,EAAtB;AAEA,QAAMO,gBAAgB,GAAG,wBAAY,MAAM;AACzCC,wBAAaC,OAAb,CAAsBC,IAAD,IAAU;AAC7B,UAAIT,WAAJ,EAAiBD,QAAQ,CAACU,IAAD,CAAR,GAAiBT,WAAW,CAACS,IAAD,CAA5B;AAClB,KAFD;AAGD,GAJwB,EAItB,CAACV,QAAD,EAAWC,WAAX,CAJsB,CAAzB;AAMAM,EAAAA,gBAAgB;AAEhB,QAAMI,eAAe,GAAG,wBACrBC,KAAD,IAAgB;AACd,UAAMC,OAAoC,GAAGC,IAAI,CAACC,KAAL,CAC3CH,KAAK,CAACI,WAAN,CAAkBC,IADyB,CAA7C;AAIA,QAAIC,oBAAoB,GAAGlB,QAAQ,CAACa,OAAD,aAACA,OAAD,uBAACA,OAAO,CAAEH,IAAV,CAAnC;AACA,QAAIQ,oBAAJ,EAA0BA,oBAAoB,CAACL,OAAD,aAACA,OAAD,uBAACA,OAAO,CAAEI,IAAV,CAApB;AAC3B,GARqB,EAStB,CAACjB,QAAD,CATsB,CAAxB;AAYA,sBACE,6BAAC,2BAAD;AACE,IAAA,KAAK,EAAEE,KADT;AAEE,IAAA,qBAAqB,EAAE,IAFzB;AAGE,IAAA,MAAM,EAAE;AAAEiB,MAAAA,GAAG,EAAEb;AAAP,KAHV;AAIE,IAAA,iBAAiB,EAAE,IAJrB;AAKE,IAAA,GAAG,EAAED,MALP;AAME,IAAA,SAAS,EAAEM,eANb;AAOE,IAAA,aAAa,EAAE,KAPjB;AAQE,IAAA,uBAAuB,EAAGS,CAAD,IAAOC,OAAO,CAACC,GAAR,CAAYF,CAAZ,aAAYA,CAAZ,uBAAYA,CAAC,CAAEd,GAAf,CARlC;AASE,IAAA,kBAAkB,EAAE,uBAASA,GAAT;AATtB,IADF;AAaD,CA9CM","sourcesContent":["import React, { useCallback, useRef } from 'react'\nimport { WebView } from 'react-native-webview'\n\nimport template from './template'\nimport { LayoutProps, PlayerEvents } from './types'\n\nexport const Vimeo: React.FC<LayoutProps> = ({\n  handlers: handlersArr,\n  style,\n  videoId,\n  params,\n}) => {\n  const webRef = useRef<WebView>()\n  const url: string = params\n    ? `https://player.vimeo.com/video/${videoId}?${params}`\n    : `https://player.vimeo.com/video/${videoId}`\n\n  const handlers: any = {}\n\n  const registerHandlers = useCallback(() => {\n    PlayerEvents.forEach((name) => {\n      if (handlersArr) handlers[name] = handlersArr[name]\n    })\n  }, [handlers, handlersArr])\n\n  registerHandlers()\n\n  const onBridgeMessage = useCallback(\n    (event: any) => {\n      const payload: { name: string; data: any } = JSON.parse(\n        event.nativeEvent.data\n      )\n\n      let bridgeMessageHandler = handlers[payload?.name]\n      if (bridgeMessageHandler) bridgeMessageHandler(payload?.data)\n    },\n    [handlers]\n  )\n\n  return (\n    <WebView\n      style={style}\n      allowsFullscreenVideo={true}\n      source={{ uri: url }}\n      javaScriptEnabled={true}\n      ref={webRef as any}\n      onMessage={onBridgeMessage}\n      scrollEnabled={false}\n      onNavigationStateChange={(a) => console.log(a?.url)}\n      injectedJavaScript={template(url)}\n    />\n  )\n}\n"]}