"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _react = _interopRequireWildcard(require("react"));

var _reactNative = require("react-native");

var _styles = require("./styles");

var _reactNativeBackgroundTimer = _interopRequireDefault(require("react-native-background-timer"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

/* eslint-disable no-bitwise */
const defaulProps = {
  style: {},
  textStyle: {},
  onTimes: _seconds => {},
  onPause: _seconds => {},
  onEnd: _seconds => {}
};
let interval = null;
let hours = 0;
let minute = 0;
let seconds = 0;
let currentSeconds = 0;

const CountdownComponent = /*#__PURE__*/_react.default.forwardRef((props, ref) => {
  const {
    initialSeconds,
    style,
    textStyle,
    fontFamily,
    autoStart = false,
    formatTime = 'hh:mm:ss',
    onEnd,
    onTimes,
    onPause
  } = props;
  const [key, setKey] = (0, _react.useState)(Math.random());
  (0, _react.useImperativeHandle)(ref, () => {
    return {
      start,
      pause,
      resume,
      stop
    };
  });
  const init = (0, _react.useCallback)(() => {
    if (initialSeconds) {
      currentSeconds = initialSeconds;
      hours = ~~(currentSeconds / 3600);
      minute = ~~(currentSeconds % 3600 / 60);
      seconds = ~~currentSeconds % 60;
    }

    clear();
    setKey(Math.random());
  }, [initialSeconds]);
  const pause = (0, _react.useCallback)(() => {
    if (onPause) {
      onPause(currentSeconds);
    }

    clear();
  }, [onPause]);

  const resume = () => {
    if (!interval) {
      timer();
    }
  };

  const stop = () => {
    if (onEnd) {
      onEnd(currentSeconds);
    }

    init();
    clear();
  };

  (0, _react.useEffect)(() => {
    return () => {
      pause();
      init();
    };
  }, [init, pause]);
  (0, _react.useEffect)(() => {
    init();
  }, [init, initialSeconds]);
  const timer = (0, _react.useCallback)(() => {
    interval = _reactNativeBackgroundTimer.default.setInterval(() => {
      if (currentSeconds > 0) {
        currentSeconds = currentSeconds - 1;
        hours = ~~(currentSeconds / 3600);
        minute = ~~(currentSeconds % 3600 / 60);
        seconds = ~~currentSeconds % 60;

        if (onTimes) {
          onTimes(currentSeconds);
        }
      }

      if (currentSeconds <= 0) {
        if (onEnd) {
          onEnd(currentSeconds);
        }

        clear();
      }

      setKey(Math.random());
    }, 1000);
  }, [onEnd, onTimes]);
  const start = (0, _react.useCallback)(() => {
    init();

    if (!interval) {
      timer();
    }
  }, [init, timer]);
  (0, _react.useEffect)(() => {
    if (autoStart) {
      start();
    }
  }, [autoStart, initialSeconds, start]);

  const clear = () => {
    if (interval) {
      _reactNativeBackgroundTimer.default.clearInterval(interval);

      interval = null;
    }
  };

  const font = () => {
    if (fontFamily) {
      return {
        fontFamily: fontFamily
      };
    } else {
      return {};
    }
  };

  const renderTimer = () => {
    if (formatTime === 'hh:mm:ss') {
      if (hours > 0) {
        return /*#__PURE__*/_react.default.createElement(_reactNative.Text, {
          style: [_styles.styles.text, textStyle, font()]
        }, `${hours}:${minute.toString().length === 1 ? '0' : ''}${minute}:${seconds.toString().length === 1 ? '0' : ''}${seconds}`);
      } else {
        if (minute > 0) {
          return /*#__PURE__*/_react.default.createElement(_reactNative.Text, {
            style: [_styles.styles.text, textStyle, font()]
          }, `${minute}:${seconds.toString().length === 1 ? '0' : ''}${seconds}`);
        } else {
          return /*#__PURE__*/_react.default.createElement(_reactNative.Text, {
            style: [_styles.styles.text, textStyle, font()]
          }, `${seconds}`);
        }
      }
    } else {
      return /*#__PURE__*/_react.default.createElement(_reactNative.Text, {
        style: [_styles.styles.text, textStyle, font()]
      }, `${currentSeconds}`);
    }
  };

  return /*#__PURE__*/_react.default.createElement(_reactNative.View, {
    style: style,
    key: key
  }, renderTimer());
});

CountdownComponent.defaultProps = defaulProps;
var _default = CountdownComponent;
exports.default = _default;
//# sourceMappingURL=index.js.map